// Copyright [2023] <Copyright Owner>
#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

void sort_horizontal(int **matrix, int n, int m, int **result_matrix);
void sort_vertical(int **matrix, int n, int m, int **result_matrix);
void input_size(int *n_size_row, int *n_size_col, int *flag);
void pointer_allocated(int **pointer_el, int *matrix_num, int n_size_row, int n_size_col);
void input_num(int **pointer_el, int n_size_row, int n_size_col, int *flag);
void output_matrix(int **matrix_num, int n_size_row, int n_size_col);

int main() {
    int n_size_row, n_size_col, flag;
    input_size(&n_size_row, &n_size_col, &flag);
    if (flag == 0) {
        int *matrix = (int *)malloc(n_size_row * n_size_col * sizeof(int));
        int **pointer_el = (int **)malloc(n_size_row * sizeof(int *));
        if (matrix && pointer_el) {
            pointer_allocated(pointer_el, matrix, n_size_row, n_size_col);
            input_num(pointer_el, n_size_row, n_size_col, &flag);
        } else {
            flag = 1;
        }

        if (flag == 0) {
            int *horizontal_data = (int *)malloc(n_size_row * n_size_col * sizeof(int));
            int **horizontal_matrix = (int **)malloc(n_size_row * sizeof(int *));
            if (horizontal_data && horizontal_matrix) {
                pointer_allocated(horizontal_matrix, horizontal_data, n_size_row, n_size_col);
                sort_horizontal(pointer_el, n_size_row, n_size_col, horizontal_matrix);
            } else {
                flag = 1;
            }

            int *vertical_data = (int *)malloc(n_size_row * n_size_col * sizeof(int));
            int **vertical_matrix = (int **)malloc(n_size_row * sizeof(int *));
            if (vertical_data && vertical_matrix) {
                pointer_allocated(vertical_matrix, vertical_data, n_size_row, n_size_col);
                sort_vertical(pointer_el, n_size_row, n_size_col, vertical_matrix);
            } else {
                flag = 1;
            }

            if (flag == 0) {
                output_matrix(horizontal_matrix, n_size_row, n_size_col);
                printf("\n");
                output_matrix(vertical_matrix, n_size_row, n_size_col);
            } else {
                printf("n/a");
            }

            if (horizontal_data) free(horizontal_data);
            if (horizontal_matrix) free(horizontal_matrix);
            if (vertical_data) free(vertical_data);
            if (vertical_matrix) free(vertical_matrix);
        } else {
            printf("n/a");
        }

        if (matrix) free(matrix);
        if (pointer_el) free(pointer_el);
    } else {
        printf("n/a");
    }
    return 0;
}

void sort_horizontal(int **matrix, int n, int m, int **result_matrix) {
    int *vec = (int *)malloc(n * m * sizeof(int));
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            vec[count++] = matrix[i][j];
        }
    }
    qsort(vec, count, sizeof(int), compare);

    int index = 0;
    for (int row = 0; row < n; row++) {
        if (row % 2 == 0) {
            for (int col = 0; col < m; col++) {
                result_matrix[row][col] = vec[index++];
            }
        } else {
            for (int col = m - 1; col >= 0; col--) {
                result_matrix[row][col] = vec[index++];
            }
        }
    }
    free(vec);
}

void sort_vertical(int **matrix, int n, int m, int **result_matrix) {
    int *vec = (int *)malloc(n * m * sizeof(int));
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            vec[count++] = matrix[i][j];
        }
    }
    qsort(vec, count, sizeof(int), compare);

    int index = 0;
    for (int col = 0; col < m; col++) {
        if (col % 2 == 0) {
            for (int row = 0; row < n; row++) {
                result_matrix[row][col] = vec[index++];
            }
        } else {
            for (int row = n - 1; row >= 0; row--) {
                result_matrix[row][col] = vec[index++];
            }
        }
    }
    free(vec);
}

void input_size(int *n_size_row, int *n_size_col, int *flag) {
    *flag = 0;
    char c, c1;
    if (scanf("%d%c%d%c", n_size_row, &c, n_size_col, &c1) == 4 && c == ' ' && c1 == '\n' &&
        *n_size_row > 0 && *n_size_col > 0) {
    } else {
        *flag = 1;
    }
}

void pointer_allocated(int **pointer_el, int *matrix_num, int n_size_row, int n_size_col) {
    for (int i = 0; i < n_size_row; i++) {
        pointer_el[i] = matrix_num + i * n_size_col;
    }
}

void input_num(int **pointer_el, int n_size_row, int n_size_col, int *flag) {
    int p_str;
    char c_srt;
    for (int i = 0; i < n_size_row; i++) {
        for (int j = 0; j < n_size_col; j++) {
            if (scanf("%d%c", &p_str, &c_srt) == 2 && (c_srt == ' ' || c_srt == '\n')) {
                pointer_el[i][j] = p_str;
            } else {
                *flag = 1;
                return;
            }
        }
    }
}

void output_matrix(int **matrix_num, int n_size_row, int n_size_col) {
    for (int j = 0; j < n_size_row; j++) {
        for (int i = 0; i < n_size_col; i++) {
            if (i + 1 != n_size_col) {
                printf("%d ", matrix_num[j][i]);
            } else {
                printf("%d", matrix_num[j][i]);
            }
        }
        if (j + 1 != n_size_row) {
            printf("\n");
        }
    }
}
